"""cria tabela negociacaocredito e parcelamentonegociacao

Revision ID: 1f4d1131b27c
Revises: 8eacd008326a
Create Date: 2024-08-13 18:00:34.691071

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '1f4d1131b27c'
down_revision: Union[str, None] = '8eacd008326a'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('negociacao_credito',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('processo', sa.String(length=200), nullable=True),
    sa.Column('executado', sa.String(length=200), nullable=False),
    sa.Column('contrato', sa.String(length=100), nullable=True),
    sa.Column('val_devido', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('val_desconto', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('data_pri_parc', sa.Date(), nullable=True),
    sa.Column('data_ult_parc', sa.Date(), nullable=True),
    sa.Column('val_entrada', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('qtd_parc_ent', sa.Integer(), nullable=True),
    sa.Column('data_pri_parc_entr', sa.Date(), nullable=True),
    sa.Column('data_ult_parc_entr', sa.Date(), nullable=True),
    sa.Column('obs_val_neg', sa.String(length=100), nullable=True),
    sa.Column('is_term_ex_jud', sa.Boolean(), nullable=False),
    sa.Column('is_hom_ext_jud', sa.Boolean(), nullable=False),
    sa.Column('qtd', sa.Integer(), nullable=False),
    sa.Column('taxa_mes', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('val_parc', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('is_cal_parc_mensal', sa.Boolean(), nullable=False),
    sa.Column('is_cal_parc_entrada', sa.Boolean(), nullable=False),
    sa.Column('is_descumprido', sa.Boolean(), nullable=False),
    sa.Column('is_liquidado', sa.Boolean(), nullable=False),
    sa.Column('is_retorno_execucao', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('processo', 'executado', 'contrato', name='unique_processo_executado_contrato')
    )
    op.create_table('parcelamento_negociacao',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('negociacao_id', sa.Integer(), nullable=False),
    sa.Column('data', sa.Date(), nullable=False),
    sa.Column('val_parcela', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('val_pago', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('obs_val_pago', sa.String(length=100), nullable=True),
    sa.Column('data_pgto', sa.Date(), nullable=True),
    sa.Column('type', sa.Enum('Contrato', 'Entrada', name='typoparcelamento'), nullable=False),
    sa.Column('numero_parcela', sa.Integer(), nullable=False),
    sa.Column('is_pg', sa.Boolean(), nullable=False),
    sa.Column('is_val_juros', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['negociacao_id'], ['negociacao_credito.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('permissions')
    op.drop_table('module')
    op.drop_table('todos')
    op.drop_index('ix_roles_name', table_name='roles')
    op.drop_table('roles')
    op.drop_table('role_permissions')
    op.drop_index('ix_users_username', table_name='users')
    op.drop_table('users')
    op.drop_table('user_roles')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user_roles',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('role_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name='user_roles_role_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_roles_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_roles_pkey')
    )
    op.create_table('users',
    sa.Column('id', sa.BIGINT(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('password', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('full_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('otp_base32', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('otp_created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('login_otp_used', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_staff', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_superuser', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_users_username', 'users', ['username'], unique=True)
    op.create_table('role_permissions',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('role_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('permission_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], name='role_permissions_permission_id_fkey'),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name='role_permissions_role_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='role_permissions_pkey'),
    sa.UniqueConstraint('role_id', 'permission_id', name='uix_role_id_permission_id')
    )
    op.create_table('roles',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='roles_pkey')
    )
    op.create_index('ix_roles_name', 'roles', ['name'], unique=True)
    op.create_table('todos',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('state', postgresql.ENUM('draft', 'todo', 'doing', 'done', 'trash', name='todostate'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='todos_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='todos_pkey')
    )
    op.create_table('module',
    sa.Column('id', sa.BIGINT(), server_default=sa.text("nextval('module_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='module_pkey'),
    sa.UniqueConstraint('title', name='module_title_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('permissions',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('module_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['module_id'], ['module.id'], name='permissions_module_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='permissions_pkey'),
    sa.UniqueConstraint('name', 'module_id', name='uix_name_modules')
    )
    op.drop_table('parcelamento_negociacao')
    op.drop_table('negociacao_credito')
    # ### end Alembic commands ###
